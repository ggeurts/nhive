#summary NHive collection interface definitions.
#labels Phase-Design

= Introduction =

Like the C5 collections NHive will follow an interface centric approach. This page will document the NHive collection interfaces, including how they relate to the orginal C5 collection interfaces.

= Details =

_*Todo:* Insert tables with C5 collection interfaces to kick off interface (re-)design process._

==ICollectionValue<T>==
A generic collection that may be enumerated and can answer efficiently how many items it contains. Like `IEnumerable<T>`, this interface does not prescribe any operations to initialize or update the collection. The main usage for this interface is to be the return type of query operations on generic collection.

||`EventTypeEnum ListenableEvents { get;}`||A flag bitmap of the events subscribable to by this collection.||
||`EventTypeEnum ActiveEvents { get;}`||A flag bitmap of the events currently subscribed to by this collection.||
||`event CollectionChangedHandler<T> CollectionChanged;`||The change event. Will be raised for every change operation on the collection.||
||`event CollectionClearedHandler<T> CollectionCleared;`||The change event. Will be raised for every clear operation on the collection.||
||`event ItemsAddedHandler<T> ItemsAdded;`||The item added  event. Will be raised for every individual addition to the collection.||
||`event ItemInsertedHandler<T> ItemInserted;`||The item inserted  event. Will be raised for every individual insertion to the collection.||
||`event ItemsRemovedHandler<T> ItemsRemoved;`||The item removed event. Will be raised for every individual removal from the collection.||
||`event ItemRemovedAtHandler<T> ItemRemovedAt;`||The item removed at event. Will be raised for every individual removal at from the collection.||
||`bool IsEmpty { get;}`||True if this collection is empty.||
||`int Count { get;}`||The number of items in this collection</value>||
||`Speed CountSpeed { get;}`||A characterization of the speed of the `Count` property in this collection.||
||`void CopyTo(T[] array, int index);`||Copy the items of this collection to a contiguous part of an array.||
||`T[] ToArray();`||Create an array with the items of this collection (in the same order as an enumerator would output them).||
||`void Apply(Act<T> action);`||Apply a delegate to all items of this collection.||
||`bool Exists(Fun<T, bool> predicate);`||Check if there exists an item  that satisfies a specific predicate in this collection.||
||`bool Find(Fun<T, bool> predicate, out T item);`||Check if there exists an item  that satisfies a specific predicate in this collection and return the first one in enumeration order.||
||`bool All(Fun<T, bool> predicate);`||Check if all items in this collection satisfies a specific predicate.||
||`T Choose();`||Choose some item of this collection.`||
||`SCG.IEnumerable<T> Filter(Fun<T, bool> filter);`||Enumerate the items of this collection that satisfy a certain condition.||

