#summary NHive collection interface definitions.
#labels Phase-Design

= Introduction =

Like the C5 collections NHive will follow an interface centric approach. This page will document the NHive collection interfaces, including how they relate to the orginal C5 collection interfaces.

= Details =

_*Todo:* Insert tables with C5 collection interfaces to kick off interface (re-)design process._

==ICollectionValue<T>==
A generic collection that may be enumerated and can answer efficiently how many items it contains. Like `IEnumerable<T>`, this interface does not prescribe any operations to initialize or update the collection. The main usage for this interface is to be the return type of query operations on generic collection.

|| *C5* || *NHive* || *Category* || *Comments* ||
|| `EventTypeEnum ListenableEvents { get;}` || || meta || Subscribable events. ||
|| `EventTypeEnum ActiveEvents { get;}` || || events || Subscribed events. ||
|| `event CollectionChangedHandler<T> CollectionChanged;` || || events || Raised for every change. ||
|| `event CollectionClearedHandler<T> CollectionCleared;` || || events || Raised for every clear. ||
|| `event ItemsAddedHandler<T> ItemsAdded;` || || events || Raised for every individual addition. ||
|| `event ItemInsertedHandler<T> ItemInserted;` || || events || Raised for every individual insertion.||
|| `event ItemsRemovedHandler<T> ItemsRemoved;` || || events || Raised for every individual removal. ||
|| `event ItemRemovedAtHandler<T> ItemRemovedAt;` || || events || Raised for every individual removal at specific index. ||
|| `bool IsEmpty { get;}` || `bool IsEmpty { get;}` || core || ||
|| `int Count { get;}` || `int Count { get;}` || core ||  ||
|| `Speed CountSpeed { get;}` || || meta || e.g. linear, logarithmic, etc. ||
|| `void CopyTo(T[] array, int index);` || `void CopyTo(T[] array, int index);` || core ||  ||
|| `T[] ToArray();` || `T[] ToArray();` || core ||  ||
|| `void Apply(Act<T> action);` || || algorithm ||  ||
|| `bool Exists(Fun<T, bool> predicate);` || || algorithm ||  ||
|| `bool Find(Fun<T, bool> predicate, out T item);` || || algorithm || Returns first matching item. ||
|| `bool All(Fun<T, bool> predicate);` || || algorithm ||  ||
|| `T Choose();`|| || algorithm || Returns arbitrary item.` ||
|| `SCG.IEnumerable<T> Filter(Fun<T, bool> filter);` || || algorithm || ||

==IDirectedCollectionValue<T>==
A sized generic collection, that can be enumerated backwards.
|| *C5* || *NHive* || *Category* || *Comments* ||
|| `IDirectedCollectionValue<T> Backwards();` || || enumeration || ||
|| `bool FindLast(Fun<T, bool> predicate, out T item);` || || ||